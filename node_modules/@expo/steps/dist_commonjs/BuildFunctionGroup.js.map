{"version":3,"file":"BuildFunctionGroup.js","sourceRoot":"","sources":["../src/BuildFunctionGroup.ts"],"names":[],"mappings":";;;AAEA,2CAA+C;AAI/C,MAAa,kBAAkB;IAO7B,YAAY,EACV,SAAS,EACT,EAAE,EACF,qCAAqC,GAKtC;QACC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,qCAAqC,GAAG,qCAAqC,CAAC;IACrF,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;IACjF,CAAC;CACF;AAxBD,gDAwBC;AAED,SAAgB,mCAAmC,CACjD,mBAAyC;IAEzC,MAAM,sBAAsB,GAA2B,EAAE,CAAC;IAC1D,KAAK,MAAM,kBAAkB,IAAI,mBAAmB,EAAE,CAAC;QACrD,IAAI,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,KAAK,SAAS,EAAE,CAAC;YACzE,MAAM,IAAI,4BAAgB,CACxB,gCAAgC,kBAAkB,CAAC,SAAS,EAAE,sBAAsB,CACrF,CAAC;QACJ,CAAC;QACD,sBAAsB,CAAC,kBAAkB,CAAC,SAAS,EAAE,CAAC,GAAG,kBAAkB,CAAC;IAC9E,CAAC;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAbD,kFAaC","sourcesContent":["import { BuildStep } from './BuildStep.js';\nimport { BuildStepGlobalContext } from './BuildStepContext.js';\nimport { BuildConfigError } from './errors.js';\n\nexport type BuildFunctionGroupById = Record<string, BuildFunctionGroup | undefined>;\n\nexport class BuildFunctionGroup {\n  public readonly namespace: string;\n  public readonly id: string;\n  public readonly createBuildStepsFromFunctionGroupCall: (\n    globalCtx: BuildStepGlobalContext\n  ) => BuildStep[];\n\n  constructor({\n    namespace,\n    id,\n    createBuildStepsFromFunctionGroupCall,\n  }: {\n    namespace: string;\n    id: string;\n    createBuildStepsFromFunctionGroupCall: (globalCtx: BuildStepGlobalContext) => BuildStep[];\n  }) {\n    this.namespace = namespace;\n    this.id = id;\n    this.createBuildStepsFromFunctionGroupCall = createBuildStepsFromFunctionGroupCall;\n  }\n\n  public getFullId(): string {\n    return this.namespace === undefined ? this.id : `${this.namespace}/${this.id}`;\n  }\n}\n\nexport function createBuildFunctionGroupByIdMapping(\n  buildFunctionGroups: BuildFunctionGroup[]\n): BuildFunctionGroupById {\n  const buildFunctionGroupById: BuildFunctionGroupById = {};\n  for (const buildFunctionGroup of buildFunctionGroups) {\n    if (buildFunctionGroupById[buildFunctionGroup.getFullId()] !== undefined) {\n      throw new BuildConfigError(\n        `Build function group with id ${buildFunctionGroup.getFullId()} is already defined.`\n      );\n    }\n    buildFunctionGroupById[buildFunctionGroup.getFullId()] = buildFunctionGroup;\n  }\n  return buildFunctionGroupById;\n}\n"]}